#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <fcntl.h>
#include<semphore.h>

//验证在多线程条件下fork之后子进程所保留的线程
void* fun(void* arg)
{
    pid_t pid = fork();
    assert(pid != -1);

    if(pid == 0)
    {
        printf("i am child,my pid = %d\n",getpid());
    }
    else
    {
        printf("i am father and fun,my pid = %d\n",getpid());
    }
}

int main()
{
    printf("father pid = %d\n",getpid());
    pthread_t id;
    int res = pthread_create(&id,NULL,fun,NULL);
    assert(res == 0);

    sleep(1);

    int i =0;
    for(;i<5;i++)
    {
        printf("i am main ,i pid = %d\n",getpid());
        sleep(1);
    }
}

//在多线程条件下fork之后锁的状态
pthread_mutex_t mutex;

void parent()
{
    pthread_mutex_lock(&mutex);
}

void father()
{
    pthread_mutex_unlock(&mutex);
}

void child()
{
    pthread_mutex_unlock(&mutex);
}

void* fun(void* arg)
{
    pid_t pid = fork();//调用fork时，mutex应该是加锁状态
    assert(pid != -1);

    if(pid == 0)
    {
        printf("i am child,my pid = %d\n",getpid());
        pthread_mutex_lock(&mutex);
        printf("child lock success\n");
        sleep(2);
        pthread_mutex_unlock(&mutex);
        printf("child unlock success\n");
    }
    else
    {
        printf("i am father,my pid = %d\n",getpid());
        pthread_mutex_lock(&mutex);
        printf("father lock success\n");
        sleep(2);
        pthread_mutex_unlock(&mutex);
        printf("father unlock success\n");
    }
}

int main()
{
    pthread_mutex_init(&mutex,NULL);
    pthread_atfork(parent,father,child);
    printf("father pid = %d\n",getpid());
    pthread_t id;
    int res = pthread_create(&id,NULL,fun,NULL);
    assert(res == 0);

    pthread_mutex_lock(&mutex);
    int i =0;
    for(;i<5;i++)
    {
        printf("i am main ,i pid = %d\n",getpid());
        sleep(1);
    }
    pthread_mutex_unlock(&mutex);
    printf("main unlock success\n");
    pthread_exit(NULL);
}